(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Trixie = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Effect = function () {
	function Effect(shaderString, uniforms) {
		_classCallCheck(this, Effect);

		this.shaderString = shaderString;
		this.uniforms = uniforms;
		this.uniformLocations = {};
		this.uniformsNeedUpdate = true;
		this.shaderProgram = null;
		this.enabled = true;
	}

	_createClass(Effect, [{
		key: "createShaderProgram",
		value: function createShaderProgram(gl) {
			var _this = this;

			if (this.shaderProgram !== null) return;
			var vertexShader = "\n\t\t\tprecision highp float;\n\t\t\tin vec2 position;\n\t\t\tin vec2 coord;\n\t\t\tout vec2 texCoord;\n\t\t\tuniform vec2 resolution;\n\t\t\tvoid main() {\n\t\t\t\ttexCoord = coord;\n\t\t\t\tgl_Position = vec4(position/resolution * 2.0 - 1.0, 0.0, 1.0);\n\t\t\t}\n\t\t";
			var vs = gl.createShader(gl.VERTEX_SHADER);
			gl.shaderSource(vs, "#version 300 es\n" + vertexShader);
			gl.compileShader(vs);
			var fs = gl.createShader(gl.FRAGMENT_SHADER);
			gl.shaderSource(fs, "#version 300 es\n" + this.shaderString);
			gl.compileShader(fs);
			var error = gl.getShaderInfoLog(fs);
			if (error) console.error(error);
			this.shaderProgram = gl.createProgram();
			gl.attachShader(this.shaderProgram, vs);
			gl.attachShader(this.shaderProgram, fs);
			gl.linkProgram(this.shaderProgram);
			// gl.useProgram(this.program);
			this.uniformLocations.time = gl.getUniformLocation(this.shaderProgram, "time");
			this.uniformLocations.resolution = gl.getUniformLocation(this.shaderProgram, "resolution");
			this.uniformLocations.texture = gl.getUniformLocation(this.shaderProgram, "texture");
			Object.keys(this.uniforms).forEach(function (name) {
				_this.uniformLocations[name] = gl.getUniformLocation(_this.shaderProgram, name);
			});
		}
	}, {
		key: "getParameter",
		value: function getParameter(x) {
			return this.uniforms[x];
		}
	}, {
		key: "setParameter",
		value: function setParameter(x, value) {
			this.uniforms[x] = value;
			this.uniformsNeedUpdate = true;
		}
	}]);

	return Effect;
}();

exports.default = Effect;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _effect = require("./effect.js");

var _effect2 = _interopRequireDefault(_effect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	identity: function identity() {
		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tvoid main() {\n\t\t\t\tfragColor = texture(tex, texCoord);\n\t\t\t}\n\t\t", {});
	},
	invert: function invert() {
		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tvoid main() {\n\t\t\t\tvec4 color = texture(tex, texCoord);\n\t\t\t\tfragColor = vec4(vec3(1.0 - color.rgb), color.a);\n\t\t\t}\n\t\t", {});
	},
	horizontalFlip: function horizontalFlip() {
		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tvoid main() {\n\t\t\t\tvec2 coord = vec2(1.0-texCoord.x, texCoord.y);\n\t\t\t\tvec4 color = texture(tex, coord);\n\t\t\t\tfragColor = color;\n\t\t\t}\n\t\t", {});
	},
	verticalFlip: function verticalFlip() {
		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tvoid main() {\n\t\t\t\tvec2 coord = vec2(texCoord.x, 1.0 - texCoord.y);\n\t\t\t\tvec4 color = texture(tex, coord);\n\t\t\t\tfragColor = color;\n\t\t\t}\n\t\t", {});
	},
	kaleidoscope: function kaleidoscope(_ref) {
		var rotation = _ref.rotation,
		    blades = _ref.blades,
		    scale = _ref.scale;

		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tuniform vec2 resolution;\n\t\t\tuniform float rotation;\n\t\t\tuniform float scale;\n\t\t\tuniform float blades;\n\t\t\tvec2 Kaleidoscope( vec2 uv, float n) {\n\t\t\t\tfloat PI = 3.1415926535897932384626433832795;\n\t\t\t    float angle = PI / n;\n\t\t\t    float r = length( uv );\n\t\t\t    float a = atan( uv.y, uv.x ) / angle;\n\t\t\t    a = mix( fract( a ), 1.0 - fract( a ), mod( floor( a ), 2.0 ) ) * angle;\n\t\t\t    // radial = vec2(a, r);\n\t\t\t    return vec2( cos( a ), sin( a ) ) * r;\n\t\t    }\n\t\t\tvec2 cycleUv(vec2 uv) {\n\t\t\t\tfloat x;\n\t\t\t\tfloat y;\n\t\t\t\tif (uv.x > 1.0) x = 2.0 - uv.x;\n\t\t\t\telse if (uv.x < -1.0) x = -2.0 - uv.x;\n\t\t\t\telse x = uv.x;\n\t\t\t\tif (uv.y > 1.0) y = 2.0 - uv.y;\n\t\t\t\telse if (uv.y < -1.0) y = -2.0 - uv.y;\n\t\t\t\telse y = uv.y;\n\t\t\t\treturn vec2(x, y);\n\t\t\t}\n\t\t\tvoid main() {\n\t\t\t\tvec2 pos = vec2(0.5, 0.5);\n\t\t\t\tfloat aspect = resolution.y / resolution.x;\n\t\t\t\tvec2 uv = (texCoord.xy - 0.5) *  vec2(1.0/aspect, 1.0);\n\t\t\t\tvec2 k = Kaleidoscope(uv * mat2(cos(rotation), -sin(rotation), sin(rotation), cos(rotation)), blades);\n\t\t\t\tmat2 rm = mat2(cos(rotation), -sin(rotation), sin(rotation), cos(rotation));\n\t\t\t\tvec2 colour_k = rm * (k * scale + pos);\n\t\t\t\tvec4 color = texture(tex, cycleUv(colour_k));\n\t\t\t\tfragColor = color;\n\t\t\t}\n\t\t", { rotation: rotation, blades: blades, scale: scale });
	},
	zoom: function zoom(_ref2) {
		var x = _ref2.x,
		    y = _ref2.y,
		    factor = _ref2.factor;

		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tuniform float x;\n\t\t\tuniform float y;\n\t\t\tuniform float factor;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tvoid main() {\n\t\t\t\tvec2 coord = vec2((texCoord.x - x)/factor + x, (texCoord.y - y)/factor + y);\n\t\t\t\tvec4 color = texture(tex, coord);\n\t\t\t\tfragColor = color;\n\t\t\t}\n\t\t", { x: x, y: y, factor: factor });
	},
	convolve: function convolve(_ref3) {
		var kernel = _ref3.kernel;

		return new _effect2.default("\n\t\t\t#define size " + kernel.length + "\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tuniform float kernel[size];\n\t\t\tuniform vec2 resolution;\n\t\t\tfloat intmod(float a, float b) {\n\t\t\t\t\tfloat m=a-floor((a+0.5)/b)*b;\n\t\t\t\t\treturn floor(m+0.5);\n\t\t\t}\n\t\t\tvoid main() {\n\t\t\t\tvec4 avg = vec4(0);\n\t\t\t\tint len = int(sqrt(float(size)));\n\t\t\t\tfloat total = 0.0;\n\t\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\t\tint x = int(intmod(float(i), float(len)));\n\t\t\t\t\tint y = i / len;\n\t\t\t\t\tfloat weight = kernel[i];\n\t\t\t\t\tvec2 dp = vec2(float(x)-(float(len)-1.0)/(2.0), float(y)-(float(len)-1.0)/(2.0));\n\t\t\t\t\tavg += weight*texture(tex, texCoord + dp / resolution);\n\t\t\t\t}\n\t\t\t\tfragColor = vec4(avg.xyz, 1.0);\n\t\t\t}\n\t\t", { kernel: kernel });
	},
	verticalMirror: function verticalMirror() {
		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tvoid main() {\n\t\t\t\tfloat x;\n\t\t\t\tif (texCoord.x < 0.5) x = texCoord.x;\n\t\t\t\telse x = 1.0 - texCoord.x;\n\t\t\t\tvec4 color = texture(tex, vec2(x, texCoord.y));\n\t\t\t\tfragColor = color;\n\t\t\t}\n\t\t", {});
	},
	horizontalMirror: function horizontalMirror() {
		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tvoid main() {\n\t\t\t\tfloat y;\n\t\t\t\tif (texCoord.y < 0.5) y = texCoord.y;\n\t\t\t\telse y = 1.0 - texCoord.y;\n\t\t\t\tvec4 color = texture(tex, vec2(texCoord.x, y));\n\t\t\t\tfragColor = color;\n\t\t\t}\n\t\t", {});
	},
	colorShift: function colorShift(_ref4) {
		var phase = _ref4.phase;

		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tuniform float phase;\n\t\t\tvec3 rgb2hsv(vec3 c) {\n\t\t\t    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\t\t\t    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n\t\t\t    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\t\t\t    float d = q.x - min(q.w, q.y);\n\t\t\t    float e = 1.0e-10;\n\t\t\t    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n\t\t\t}\n\t\t\tvec3 hsv2rgb(vec3 c) {\n\t\t\t    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\t\t\t    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\t\t\t    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n\t\t\t}\n\t\t\tvoid main() {\n\t\t\t\tvec4 cin = texture(tex, texCoord);\n\t\t\t\tvec3 hsv = rgb2hsv(cin.rgb);\n\t\t\t\tvec3 cout = hsv2rgb(vec3(fract(hsv.x + phase), hsv.y, hsv.z));\n\t\t\t\tfragColor = vec4(cout, 1.0);\n\t\t\t}\n\t\t", { phase: phase });
	},
	gamma: function gamma(_ref5) {
		var value = _ref5.value;

		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tuniform float value;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tvoid main() {\n\t\t\t\tvec4 c = texture(tex, texCoord);\n\t\t\t\tfragColor = vec4(pow(c.r, value), pow(c.g, value), pow(c.b, value), c.a);\n\t\t\t}\n\t\t", { value: value });
	},
	localHistogramEqualization: function localHistogramEqualization(_ref6) {
		var width = _ref6.width,
		    bins = _ref6.bins;

		console.warn("Warning: Local histogram equalization is an experimental feature.");
		return new _effect2.default("\n\t\t\t\t#define size " + Math.round(width * width) + "\n\t\t\t\t#define bins " + Math.round(bins) + "\n\t\t\t\tprecision highp float;\n\t\t\t\tuniform float value;\n\t\t\t\tuniform vec2 resolution;\n\t\t\t\tuniform sampler2D tex;\n\t\t\t\tin vec2 texCoord;\n\t\t\t\tout vec4 fragColor;\n\t\t\t\tfloat distr[bins];\n\t\t\t\tfloat intmod(float a, float b) {\n\t\t\t\t\tfloat m=a-floor((a+0.5)/b)*b;\n\t\t\t\t\treturn floor(m+0.5);\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tint len = int(sqrt(float(size)));\n\t\t\t\t\tfloat SSE = 0.0;\n\t\t\t\t\tfloat mean = 0.0;\n\t\t\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\t\t\tint x = int(intmod(float(i), float(len)));\n\t\t\t\t\t\tint y = i / len;\n\t\t\t\t\t\tvec2 dp = vec2(float(x)-(float(len)-1.0)/(2.0), float(y)-(float(len)-1.0)/(2.0));\n\t\t\t\t\t\tvec4 color = texture(tex, texCoord + dp / resolution);\n\t\t\t\t\t\tfloat gs = (color.r + color.g + color.b) / 3.0;\n\t\t\t\t\t\tint hi = int(min(float(bins)-1.0, floor(gs * float(bins))));\n\t\t\t\t\t\tdistr[hi] += 1.0/float(size);\n\t\t\t\t\t\tmean += gs / float(size);\n\t\t\t\t\t}\n\t\t\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\t\t\tint x = int(intmod(float(i), float(len)));\n\t\t\t\t\t\tint y = i / len;\n\t\t\t\t\t\tvec2 dp = vec2(float(x)-(float(len)-1.0)/(2.0), float(y)-(float(len)-1.0)/(2.0));\n\t\t\t\t\t\tvec4 color = texture(tex, texCoord + dp / resolution);\n\t\t\t\t\t\tfloat gs = (color.r + color.g + color.b) / 3.0;\n\t\t\t\t\t\tSSE += (gs - mean) * (gs - mean);\n\t\t\t\t\t}\n\t\t\t\t\tvec4 c = texture(tex, texCoord);\n\t\t\t\t\tfloat gs = (c.r + c.g + c.b) / 3.0;\n\t\t\t\t\tint bin =  int(min(float(bins)-1.0, floor(gs * float(bins))));\n\t\t\t\t\tfloat fgs = 0.0;\n\t\t\t\t\tfor (int k = 0; k <= bin; k++) fgs += distr[k];\n\t\t\t\t\t// adaptation\n\t\t\t\t\tfloat var_max = (float(size) / (float(size) - 1.0)) / 16.0;\n\t\t\t\t\tfloat var = SSE / (float(size) - 1.0);\n\t\t\t\t\tfloat adaptation = var / (var_max);\n\t\t\t\t\tvec3 result = adaptation * (fgs / gs) * c.rgb + (1.0 - adaptation) * c.rgb;\n\t\t\t\t\tfragColor = vec4(result, c.a);\n\t\t\t\t}\n\t\t\t", { width: width, bins: bins });
	},
	whiteNoise: function whiteNoise(_ref7) {
		var intensity = _ref7.intensity;

		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tuniform float intensity;\n\t\t\tfloat rand(vec2 co) {\n\t\t\t\t// Source: https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\n\t\t\t    highp float a = 12.9898;\n\t\t\t    highp float b = 78.233;\n\t\t\t    highp float c = 43758.5453;\n\t\t\t    highp float dt= dot(co.xy ,vec2(a,b));\n\t\t\t    highp float sn= mod(dt,3.14);\n\t\t\t    return fract(sin(sn) * c);\n\t\t\t}\n\t\t\tvoid main() {\n\t\t\t\tfloat rnd = rand(texCoord);\n\t\t\t\tvec4 c = texture(tex, texCoord);\n\t\t\t\tfragColor = vec4(intensity * vec3(2.0*rnd - 1.0) + (1.0 - intensity) * c.rgb, 1.0);\n\t\t\t}\n\t\t", { intensity: intensity });
	},
	saltAndPepperNoise: function saltAndPepperNoise(_ref8) {
		var probability = _ref8.probability;

		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform float probability;\n\t\t\tuniform sampler2D tex;\n\t\t\tfloat rand(vec2 co) {\n\t\t\t\t// Source: https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\n\t\t\t    highp float a = 12.9898;\n\t\t\t    highp float b = 78.233;\n\t\t\t    highp float c = 43758.5453;\n\t\t\t    highp float dt= dot(co.xy ,vec2(a,b));\n\t\t\t    highp float sn= mod(dt,3.14);\n\t\t\t    return fract(sin(sn) * c);\n\t\t\t}\n\t\t\tvoid main() {\n\t\t\t\tfloat rnd1 = rand(texCoord);\n\t\t\t\tfloat rnd2 = rand(vec2(1.0, 1.0) - texCoord);\n\t\t\t\tvec4 c = texture(tex, texCoord);\n\t\t\t\tvec3 result = step(probability, rnd1) * c.rgb + (1.0 - step(probability, rnd1)) * (step(0.5, rnd2) * vec3(1, 1, 1));\n\t\t\t\tfragColor = vec4(result, c.a);\n\t\t\t}\n\t\t", { probability: probability });
	},
	adaptiveMeanFilter: function adaptiveMeanFilter(_ref9) {
		var width = _ref9.width,
		    noiseVariance = _ref9.noiseVariance;

		return new _effect2.default("\n\t\t\t#define size " + Math.round(width * width) + "\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform vec2 resolution;\n\t\t\tuniform sampler2D tex;\n\t\t\tuniform float noiseVariance;\n\t\t\tfloat intmod(float a, float b) {\n\t\t\t\tfloat m=a-floor((a+0.5)/b)*b;\n\t\t\t\treturn floor(m+0.5);\n\t\t\t}\n\t\t\tvoid main() {\n\t\t\t\tint len = int(sqrt(float(size)));\n\t\t\t\tfloat mean = 0.0;\n\t\t\t\tvec3 avgColor = vec3(0,0,0);\n\t\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\t\tint x = int(intmod(float(i), float(len)));\n\t\t\t\t\tint y = i / len;\n\t\t\t\t\tvec2 dp = vec2(float(x)-(float(len)-1.0)/(2.0), float(y)-(float(len)-1.0)/(2.0));\n\t\t\t\t\tvec4 color = texture(tex, texCoord + dp / resolution);\n\t\t\t\t\tfloat gs = (color.r + color.g + color.b) / 3.0;\n\t\t\t\t\tmean += gs / float(size);\n\t\t\t\t\tavgColor += color.rgb / float(size);\n\t\t\t\t}\n\t\t\t\tfloat SSE = 0.0;\n\t\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\t\tint x = int(intmod(float(i), float(len)));\n\t\t\t\t\tint y = i / len;\n\t\t\t\t\tvec2 dp = vec2(float(x)-(float(len)-1.0)/(2.0), float(y)-(float(len)-1.0)/(2.0));\n\t\t\t\t\tvec4 color = texture(tex, texCoord + dp / resolution);\n\t\t\t\t\tfloat gs = (color.r + color.g + color.b) / 3.0;\n\t\t\t\t\tSSE += (gs - mean) * (gs - mean);\n\t\t\t\t}\n\t\t\t\tfloat localVariance = SSE / (float(size) - 1.0);\n\t\t\t\tvec4 c = texture(tex, texCoord);\n\t\t\t\tfloat factor = min(1.0, max(0.0, (noiseVariance / localVariance)));\n\t\t\t\tvec3 result = c.rgb * (1.0 - factor) +  factor * (avgColor);\n\t\t\t\tfragColor = vec4(result, c.a);\n\t\t\t}\n\t\t", { width: width, noiseVariance: noiseVariance });
	},
	colorBalance: function colorBalance(_ref10) {
		var r = _ref10.r,
		    g = _ref10.g,
		    b = _ref10.b;

		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tuniform float r;\n\t\t\tuniform float g;\n\t\t\tuniform float b;\n\t\t\tvoid main() {\n\t\t\t\tvec4 c = texture(tex, texCoord);\n\t\t\t\tfragColor = vec4(c.r / r, c.g / g, c.b / b, c.a);\n\t\t\t}\n\t\t", { r: r, g: g, b: b });
	},
	dilate: function dilate(_ref11) {
		var element = _ref11.element;

		return new _effect2.default("\n\t\t\t#define size " + element.length + "\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tuniform float element[size];\n\t\t\tuniform vec2 resolution;\n\t\t\tfloat intmod(float a, float b) {\n\t\t\t\t\tfloat m=a-floor((a+0.5)/b)*b;\n\t\t\t\t\treturn floor(m+0.5);\n\t\t\t}\n\t\t\tvoid main() {\n\t\t\t\tvec4 avg = vec4(0);\n\t\t\t\tint len = int(sqrt(float(size)));\n\t\t\t\tfloat total = 0.0;\n\t\t\t\tvec4 result = vec4(0);\n\t\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\t\tif (element[i] < 0.5) continue;\n\t\t\t\t\tint x = int(intmod(float(i), float(len)));\n\t\t\t\t\tint y = i / len;\n\t\t\t\t\tvec2 dp = vec2(float(x)-(float(len)-1.0)/(2.0), float(y)-(float(len)-1.0)/(2.0));\n\t\t\t\t\tvec4 c = texture(tex, texCoord + dp / resolution);\n\t\t\t\t\tif (length(c.rgb) > length(result.rgb)) result = c;\n\t\t\t\t}\n\t\t\t\tfragColor = result;\n\t\t\t}\n\t\t", { element: element });
	},
	erode: function erode(_ref12) {
		var element = _ref12.element;

		return new _effect2.default("\n\t\t\t#define size " + element.length + "\n\t\t\tprecision highp float;\n\t\t\tin vec2 texCoord;\n\t\t\tout vec4 fragColor;\n\t\t\tuniform sampler2D tex;\n\t\t\tuniform float element[size];\n\t\t\tuniform vec2 resolution;\n\t\t\tfloat intmod(float a, float b) {\n\t\t\t\t\tfloat m=a-floor((a+0.5)/b)*b;\n\t\t\t\t\treturn floor(m+0.5);\n\t\t\t}\n\t\t\tvoid main() {\n\t\t\t\tvec4 avg = vec4(0);\n\t\t\t\tint len = int(sqrt(float(size)));\n\t\t\t\tfloat total = 0.0;\n\t\t\t\tvec4 result = vec4(1);\n\t\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\t\tif (element[i] < 0.5) continue;\n\t\t\t\t\tint x = int(intmod(float(i), float(len)));\n\t\t\t\t\tint y = i / len;\n\t\t\t\t\tvec2 dp = vec2(float(x)-(float(len)-1.0)/(2.0), float(y)-(float(len)-1.0)/(2.0));\n\t\t\t\t\tvec4 c = texture(tex, texCoord + dp / resolution);\n\t\t\t\t\tif (length(c.rgb) < length(result.rgb)) result = c;\n\t\t\t\t}\n\t\t\t\tfragColor = result;\n\t\t\t}\n\t\t", { element: element });
	},
	void: function _void() {
		return new _effect2.default("\n\t\t\tprecision highp float;\n\t\t\tout vec4 fragColor;\n\t\t\tvoid main() {\n\t\t\t\tfragColor = vec4(vec3(0), 1.0);\n\t\t\t}\n\t\t", {});
	}
};

},{"./effect.js":1}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _effect = require('./effect.js');

var _effect2 = _interopRequireDefault(_effect);

var _effects = require('./effects.js');

var _effects2 = _interopRequireDefault(_effects);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Trixie = function () {
	function Trixie(opts) {
		_classCallCheck(this, Trixie);

		this.initialized = false;
		this.uniformLocations = {};
		this.program = null;
		this.gl = null;
		this.frameBuffers = [];
		this.textures = [];
		this.originalTexture = null;
		this.effects = opts.effects;
		this.verticalFlip = _effects2.default.verticalFlip();
		this.identity = _effects2.default.identity();
		this.input = opts.input;
		this.output = opts.output;
		return this;
	}

	_createClass(Trixie, [{
		key: 'setupFrameBuffers',
		value: function setupFrameBuffers() {
			// Main texture / FBO
			var mTexture = this.gl.createTexture();
			this.gl.bindTexture(this.gl.TEXTURE_2D, mTexture);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);
			this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.input.width, this.input.height, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);
			var mFbo = this.gl.createFramebuffer();
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, mFbo);
			this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, mTexture, 0);
			this.textures.push(mTexture);
			this.frameBuffers.push(mFbo);
			// Swap texture / FBO
			var sTexture = this.gl.createTexture();
			this.gl.bindTexture(this.gl.TEXTURE_2D, sTexture);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);
			this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.input.width, this.input.height, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);
			var sFbo = this.gl.createFramebuffer();
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, sFbo);
			this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, sTexture, 0);
			this.textures.push(sTexture);
			this.frameBuffers.push(sFbo);
			// Original texture
			var oTexture = this.gl.createTexture();
			this.gl.bindTexture(this.gl.TEXTURE_2D, oTexture);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);
			this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.input);
			this.originalTexture = oTexture;
		}
	}, {
		key: 'setupVertexBuffer',
		value: function setupVertexBuffer(program) {
			var x1 = 0;
			var y1 = 0;
			var x2 = this.input.width;
			var y2 = this.input.height;
			var verts = [x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2];
			var buffer = this.gl.createBuffer();
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);
			this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(verts), this.gl.STATIC_DRAW);
			var position = this.gl.getAttribLocation(program, "position");
			this.gl.vertexAttribPointer(position, 2, this.gl.FLOAT, false, 0, 0);
			this.gl.enableVertexAttribArray(position);
			var texCoordData = [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0];
			var tbuffer = this.gl.createBuffer();
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER, tbuffer);
			this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(texCoordData), this.gl.STATIC_DRAW);
			var texCoord = this.gl.getAttribLocation(program, "coord");
			if (texCoord >= 0) {
				this.gl.vertexAttribPointer(texCoord, 2, this.gl.FLOAT, false, 0, 0);
				this.gl.enableVertexAttribArray(texCoord);
			}
		}
	}, {
		key: 'setFramebuffer',
		value: function setFramebuffer(fbo, width, height) {
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, fbo);
			this.gl.viewport(0, 0, width, height);
		}
	}, {
		key: 'initialize',
		value: function initialize() {
			var _this = this;

			// GL Context
			var gl = this.output.getContext("webgl2");
			this.gl = gl;
			// Frame buffers
			this.setupFrameBuffers();
			// Shader programs
			this.effects.forEach(function (fx) {
				return fx.createShaderProgram(_this.gl);
			});
			this.verticalFlip.createShaderProgram(this.gl);
			this.identity.createShaderProgram(this.gl);
			this.initialized = true;
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			if (!this.initialized) this.initialize();
			this.gl.bindTexture(this.gl.TEXTURE_2D, this.originalTexture);
			this.setupVertexBuffer(this.identity.shaderProgram); // it just works for any shader.
			var i = 0;

			var _loop = function _loop(k) {
				if (_this2.effects[k].enabled == false) return 'continue';
				_this2.gl.useProgram(_this2.effects[k].shaderProgram);
				_this2.setFramebuffer(_this2.frameBuffers[i % 2], _this2.input.width, _this2.input.height);
				// update uniforms
				_this2.gl.uniform1i(_this2.effects[k].uniformLocations.texture, 0);
				_this2.gl.uniform2f(_this2.effects[k].uniformLocations.resolution, _this2.output.width, _this2.output.height);
				if (_this2.effects[k].uniformsNeedUpdate) {
					Object.keys(_this2.effects[k].uniforms).forEach(function (name) {
						if (typeof _this2.effects[k].uniforms[name] === 'number') _this2.gl.uniform1f(_this2.effects[k].uniformLocations[name], _this2.effects[k].uniforms[name]);else if (_typeof(_this2.effects[k].uniforms[name]) === 'object') _this2.gl.uniform1fv(_this2.effects[k].uniformLocations[name], _this2.effects[k].uniforms[name]);else console.error('Error: unsupported uniform type (' + _typeof(_this2.effects[k].uniforms[name]) + ')');
					});
					_this2.effects[k].uniformsNeedUpdate = false;
				}
				// draw
				_this2.gl.drawArrays(_this2.gl.TRIANGLES, 0, 6);
				// use the texture we just rendered to.
				_this2.gl.bindTexture(_this2.gl.TEXTURE_2D, _this2.textures[i % 2]);
				i++;
			};

			for (var k = 0; k < this.effects.length; k++) {
				var _ret = _loop(k);

				if (_ret === 'continue') continue;
			}
			// draw to screen
			var finalEffect = void 0;
			finalEffect = this.verticalFlip;
			//if (i % 2 == 1)
			//else finalEffect = this.identity;
			this.gl.useProgram(finalEffect.shaderProgram);
			this.setFramebuffer(null, this.output.width, this.output.height);
			this.gl.uniform1i(finalEffect.uniformLocations.texture, 0);
			this.gl.uniform2f(finalEffect.uniformLocations.resolution, this.output.width, this.output.height);
			this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);
			// this.output.width = this.output.scrollWidth; // ???
			// this.output.height = this.output.scrollHeight; // ???
			// gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
			return this;
		}
	}]);

	return Trixie;
}();

exports.default = Trixie;


Trixie.effects = _effects2.default;
module.exports = Trixie;

},{"./effect.js":1,"./effects.js":2}]},{},[3])(3)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
